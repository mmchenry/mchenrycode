function generate_plots_mjm


% 1. Generate plots of flow generated by an oscillating sphere, 
% according to Lamb (1932), Article 361
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Variables 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
f       = [10.^linspace(-4,4,1000)];
omega   = 2.*pi.*f;


% Physical constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C  = 1497; % speed of sound in water at 25C (m/s)
v  = 1e-6; % kinematic viscosity of water (m^2/s)
rho = 998; %998 kg m^-3
mu  = 1.002e-3; %1.002e-3 Pa s
%a  = 3.*10^-3; % radius of the oscillating sphere (m)
zH = 5.2e-6; % distance from plate
zC = linspace(0,45e-6,50);
delta   = ( 2 .* v ./ omega ).^0.5;

% Run cupula model
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
c       = c_default_theo;
c       = numerical_twopart(c,'torsion spring');
S_bun   = [c.M(1,:) ./ (i.*(c.freqs').*2.*pi.*c.dispAmp)];
%S_bun   = [c.M(1,:) ./ ((i.*(c.freqs').*2.*pi.*c.dispAmp) .* (1-exp(-(1+i).*c.bunHeight./delta)))];

% Construct plot showing freq response of flow -- VARIABLE RADIUS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a  = [1 3 5].*10^-3; % radius of the oscillating sphere (m)
%a = 7e-3;
p  = 10e-3; % dist btwn sphere surface and flat plate


f1 = figure;
f2 = figure;

for j = 1:length(a)
    % Frequency response plots
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %figure(f1);
    
    %original code
%     uLin = oscillating_sphere_mirror_lin(C, v, omega, a(j), zH, p);
%     u = oscillating_sphere_mirror(C, v, omega, a(j), zH, p);
%     
%     uInf = ((1-i).*delta./2) .* uLin./zH;
%     
%     S_tot   = S_bun .* uInf;
    
    %stand-in code (using sphere m_files):
      W     = 1;
      %W     = (i.*(c.freqs').*2.*pi.*c.dispAmp);
      uLin  = U_s_lin(C, mu, rho, omega, a(j), p+a(j), W);
      uInf  = ((1-i).*delta./2) .* uLin;
      uInf  = uLin ./ ((1+i)./delta);
      %flwAmp= c.dispAmp 
      %uLocal= flwAmp * (1-exp(-h*(1+i)/delta))
      
      
    %S_tot = (bundle deflection)./(sphere velocity):
      S_tot = S_bun .* uInf;
      

      
    
    figure(f1)
    subplot(2,1,1);
    loglog(f, abs(uLin));hold on
    %loglog(f, abs(u),'k--');
    
    xlabel('Frequency (Hz)');
    %ylabel('Magnitude (dB)');
    
    subplot(2,1,2);
    semilogx(f, 180*unwrap(angle(uLin))/pi);hold on
    %semilogx(f, 180*unwrap(angle(u))/pi,'k--');
    
    xlabel('Frequency (Hz)');
    ylabel('Phase (degrees)');
    
%     Snew = (i.*(c.freqs').*2.*pi.*c.dispAmp) ./ ...
%         [U_s_lin(C, mu, rho, omega, a(j), p+a(j), W, c.bunHeight)]';
    
%tmp = S_tot./uLin;
    
    
    figure(f2)
    subplot(2,1,1);
    loglog(f, abs(S_tot),'r-'); hold on
    %loglog(f, abs(tmp),'r--'); hold on
    xlabel('Frequency (Hz)');
    
    subplot(2,1,2);
    semilogx(f, 180*unwrap(angle(S_tot))/pi,'r-');hold on
    %semilogx(f, 180*unwrap(angle(tmp))/pi,'r--');hold on
    xlabel('Frequency (Hz)');
    
    
    clear uLin
    
%     % Profile plots
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     figure(f2);
%     omegas = [1 10 100];
%     for k = 1:length(omegas)
%         uLin = oscillating_sphere_mirror_lin(C, v, omegas(k), a(j), zC, p);
%         
%         subplot(length(a),length(omegas),p)
%         p = p+1;
%         plot(abs(uLin),zC,'b')
%         title([num2str(omegas(k)) ' Hz  a = ' num2str(a(j))]); 
%         hold on
%     end
    
end



% % Construct plot that compares boundary layers of mirrored spheres and the
% % pressure-driven BL
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% a       = 7 .*10^-3;
% p       = 50e-3; % dist btwn sphere center and flat plate
% f       = 1000;
% h       = [linspace(0,40e-6,100)]';
% flwAmp  = 1;
% 
% omega   = 2*pi*f;
% delta   = ( 2 .* v ./ omega ).^0.5;
% uSph    = oscillating_sphere_mirror_lin(C, v, omega, a, h, p);
% uPres   = flwAmp * (1-exp(-h*(1+i)/delta));
% 
% r       = rSquared(abs(uSph),abs(uPres));
% 
% figure;
% plot(abs(uSph)/max(abs(uSph)),h,'k-');hold on
% plot(abs(uPres)/max(abs(uPres)),h,'r--');hold on
% set(gca,'TickDir','out');
% axis square


return

% loop through freqs:

f = 10.^linspace(-1,4,100);

for j = 1:length(f)
    omega   = 2*pi*f(j);
    delta   = ( 2 .* v ./ omega ).^0.5;
    uSph    = oscillating_sphere_mirror_lin(C, v, omega, a, h, p);
    uPres   = flwAmp * (1-exp(-h*(1+i)/delta));

    r2(j)   = rSquared(abs(uSph),abs(uPres));
end

figure
semilogx(f,r2)


return
% Construct plot showing freq response of flow -- VARIABLE DISTANCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a = 1.5.*10^-3; % radius of the oscillating sphere (m)
p = [2:2:10].*10^-3; % dist btwn sphere center and flat plate

hf = figure;
set(hf,'DoubleBuffer','on')
for j = 1:length(p)
    u = oscillating_sphere_mirror_lin(C, v, omega, a, z, p(j));

    subplot(2,1,1);
    loglog(f, abs(u));
    xlabel('Frequency (Hz)');
    %ylabel('Magnitude (dB)');
    hold on
    
    subplot(2,1,2);
    semilogx(f, 180*(angle(u))/pi);
    xlabel('Frequency (Hz)');
    ylabel('Phase (degrees)');
    hold on
    pause(.5)
end





return


function r= rSquared(X,Y)
% rsquared(X,Y).  This finds the r-squared value that describes the
% goodness of fit
% between column vectors X and Y
if size(X,2)>1 | size(Y,2)>1
	error('You need to use two column vectors!');
end
sigy1sq= sum((X-mean(X)).^2);
sigy2sq= sum((Y-mean(Y)).^2);
sigy1y2= sum((X-mean(X)).*(Y-mean(Y)));
r= sigy1y2.^2 / (sigy1sq .* sigy2sq);



function c = c_default_theo
%Parameters for all anlayses
c.freqs         = [10.^linspace(-2,2,1000)]';
c.numHeights    = 1;
c.bunHeight     = 5.3e-6; %From Dinklo, 2005
c.dispAmp       = 10 * 10^-6; %m
c.E_matrix      = 31; %31 Pa
c.EI_kino       = 2.4e-21; % 2e-21 N m^2
c.bundleStiff   = 2.925e-14; %Nm/rad (van Netten & Kroese, 1987)
c.linStiff      = 0.13 * 10^-3; %N/m (van Netten & Kroese, 1987)
c.rho           = 998; %998 kg m^-3
c.mu            = 1.002e-3; %1.002e-3 Pa s

%Data from morphometric measurements (based on stiffness paper)
c.baseDiameter 	= 8.88e-6;
c.midDiameter 	= 7.2e-6 ;
%c.kinoHeight 	= 29.7e-6;
c.kinoHeight 	= 16e-6;
c.cupHeight     = 45e-6;
c.numHairs      = 11;



function u = oscillating_sphere_mirror_lin(C, v, omega, a, z, p)
%This is flow for the profile normal to the direction of oscillation

if p < a
    warning('radius exceeds distance from plate')
end

k1 = sqrt( omega.^2 ./ (C.^2 + (4/3).*i.*v.*omega) );
k2 = (1-i) .* sqrt( omega ./ (2*v) );

disp(' '); disp(' ')
    disp(['k1*z = ' num2str(max(abs(k1(:)).*max(z(:)))) ...
        '     k2*z = ' num2str(max(abs(k2(:)).*max(z(:))))])
disp('Both should be <<1');

A1 = - (3 + 3*i*k2.*a - k2.^2.*a.^2).*k1.^3.*a.^3.*exp(i*k1.*a) ./...
    (k1.^2.*a.^2.*(1+i*k2.*a) + (2+2*i*k1.*a-k1.^2.*a.^2).*k2.^2.*a.^2);

B1 = (1/3) * (3 + 3*i*k1.*a - k1.^2.*a.^2).*k2.^3.*a.^3.*exp(i*k2.*a) ./...
    (k1.^2.*a.^2.*(1+i*k2.*a) + (2+2*i*k1.*a-k1.^2.*a.^2).*k2.^2.*a.^2);

for j = 1:length(z)
    uA = A1.* ...
        ( (2./(k1.*p).^2) - (6.*i./(k1.*p).^3) - (6./(k1.*p).^4) ) ...
        .* k1 .* exp(-i.*k1.*p) .* z(j);
    uB = B1.* ...
        ( (6.*i./(k2.*p)) + (12./(k2.*p).^2) - (18*i./(k2.*p).^3) - (18./(k2.*p).^4) )...
        .* k2.*exp(-i.*k2.*p).*z(j);

    u(j,:) = uA + uB;
end
     

function u = oscillating_sphere_mirror(C, v, omega, a, z, p)
%This is flow for the profile normal to the direction of oscillation

u = oscillating_sphere(C, v, omega, a, p-z) - ...
    oscillating_sphere(C, v, omega, a, p+z);


function u= oscillating_sphere(c, v, w, a, r)

   k = sqrt(w.^2 ./ (c.^2 + (4/3)*i*v.*w));
   h = (1-i) * sqrt(w ./ (2*v));

   A1 = - (3 + 3*i*h.*a - h.^2.*a.^2).*k.^3.*a.^3.*exp(i*k.*a) ./...
     (k.^2.*a.^2.*(1+i*h.*a) + (2+2*i*k.*a-k.^2.*a.^2).*h.^2.*a.^2);

   B1 = (1/3) * (3 + 3*i*k.*a - k.^2.*a.^2).*h.^3.*a.^3.*exp(i*h.*a) ./...
     (k.^2.*a.^2.*(1+i*h.*a) + (2+2*i*k.*a-k.^2.*a.^2).*h.^2.*a.^2);

   ua = - A1.*(i./(k.^2.*r.^2) + 1./(k.^3.*r.^3)).*exp(-i*k.*r);
   ub = B1.*(3./(h.*r) - 3*i./(h.^2.*r.^2) - 3./(h.^3.*r.^3)).*exp(-i*h.*r);

   u = ua + ub;           

function c = speedofSound(T)
%Gives speed of sound in m/s for temperature in degrees C
% From Bilaniuk & Wong (1993 & 1996)
c =   1.40238744 * 10^3 + 5.03836171 * T - 5.81172916 * 10^-2 * T^2 ...
    + 3.34638117 * 10^-4 * T^3 - 1.48259672 * 10^-6 * T^4 ...
    + 3.16585020 * 10^-9 * T^5;
