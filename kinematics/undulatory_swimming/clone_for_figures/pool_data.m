function pool_data
% This collects data files generated by analyze_head


%% Parameters

rootDir = '/Volumes/Docs/Projects/head_swimming/kinematic_data';
use_centroid= 1;  %(1 or 0) Use the centroid of the head or posterior mean
rerun       = 0;  %(1 or 0) Repeats analyze_head for all sequences
repool      = 0;  %(1 or 0) Load and consolidate the data
visSeries   = 0;  %(1 or 0) visualize timeseries data
visDPSeries = 0;  %(1 or 0) visualize timeseries data for pressure
visBox      = 0;  %(1 or 0) Create bloxplots
visLines    = 1;
runStats    = 1;  %(1 or 0) Run statistics
runShamStats= 0;
runFigForPaper = 0;  %(1 or 0) Create time series used in paper
runFigForPaper2 = 0; %(1 or 0) Create time series on dp used in paper

%% Gather list of directories where data are present

ds = dirList(rootDir);

%% Re-run analyze_head for all sequences
% This is necessary whenever a change has been made to analyze_head

if rerun    
    for i = 1:length(ds)
       for j = 1:3
           if ~isempty(ds(i).pre_dir{j})
               analyze_head(ds(i).pre_dir{j},0,use_centroid);
           end
           if ~isempty(ds(i).post_dir{j})
               analyze_head(ds(i).post_dir{j},0,use_centroid);
           end
       end
       
       disp(' ')
       disp(['Done ' num2str(i) ' of ' num2str(length(ds))])
    end  
end

%% Collect and plot time series data for V

if visSeries
    shamData = 0;

    % Slow data
    v  = get_series_vals('V',ds,'pre ',shamData,'slow',use_centroid);
    f = figure;
    set(f,'Name','V, slow')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end


    % Med data
    v  = get_series_vals('V',ds,'pre ',shamData,'med',use_centroid);
    f = figure;
    set(f,'Name','V, med')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end


    % Fast data
    v  = get_series_vals('V',ds,'pre ',shamData,'fast',use_centroid);
    f = figure;
    set(f,'Name','V, fast')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end

end

%% Figure for paper

if runFigForPaper
    i = 6;
    
    v  = get_series_vals('V',ds,'pre ',0,'slow',use_centroid);
    f = figure;
    subplot(2,1,1)
    set(f,'Name','V, slow')
    h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
    hold on
    plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
    set(h,'Color',.5'*[1 1 1]);
    title('pre treat V')
    axis([-.05 1.25 -7 7])
    
    
    v  = get_series_vals('alpha',ds,'pre ',0,'slow',use_centroid);
    subplot(2,1,2)
    set(f,'Name','alpha, slow')
    h = plot(v.time{i}-min(v.time{i}),v.spVals{i}.*(180/pi),'-');
    hold on
    plot(v.time{i}-min(v.time{i}),v.snVals{i}.*(180/pi),'b-')
    set(h,'Color',.5'*[1 1 1]);
    title('pre treat alpha')
    axis([-.05 1.25 -10 10])
    
    v  = get_series_vals('V',ds,'post',0,'slow',use_centroid);
    f = figure;
    subplot(2,1,1)
    set(f,'Name','V, slow')
    h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
    hold on
    plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
    set(h,'Color',.5'*[1 1 1]);
    title('post treat V')
    axis([-.05 1.25 -7 7])
    
    v  = get_series_vals('alpha',ds,'post',0,'slow',use_centroid);
    subplot(2,1,2)
    set(f,'Name','alpha, slow')
    h = plot(v.time{i}-min(v.time{i}),v.spVals{i}.*(180/pi),'-');
    hold on
    plot(v.time{i}-min(v.time{i}),v.snVals{i}.*(180/pi),'b-')
    set(h,'Color',.5'*[1 1 1]);
    title('post treat alpha')
    axis([-.05 1.25 -10 10])
    
end

%% Figure for paper 2

if runFigForPaper2
    
%     % Pre/Slow data
%     v  = get_series_vals('V',ds,'pre ',0,'slow',use_centroid);
%     f = figure;
%     set(f,'Name','V, slow')
%     i = 6
%         subplot(2,1,1)
%         h = plot(v.time{i}-min(v.time{i}),v.snVals{i},'-');
%         hold on
%         title(v.dname{i})
%         axis([0 1 ylim])
%         
%     % Post/Slow data
%     v  = get_series_vals('V',ds,'post',0,'slow',use_centroid);
%     
%     set(f,'Name','V, slow')
% 
%         subplot(2,1,2)
%         h = plot(v.time{i}-min(v.time{i}),v.snVals{i},'-');
%         hold on
%         title(v.dname{i})
%         axis([0 1 ylim])
        
    % Pre/Slow data
    v  = get_series_vals('alpha',ds,'pre ',0,'slow',use_centroid);
    f = figure;
    set(f,'Name','PREalpha, slow')
    i = 6
        subplot(2,1,1)
        h = plot(v.time{i}-min(v.time{i}),v.snVals{i}.*(180/pi),'-');
        hold on
        title(v.dname{i})
        axis([0 1 ylim])
        
    % Post/Slow data
    v  = get_series_vals('alpha',ds,'post',0,'slow',use_centroid);
    
    set(f,'Name','POST alpha, slow')

        subplot(2,1,2)
        h = plot(v.time{i}-min(v.time{i}),v.snVals{i}.*(180/pi),'-');
        hold on
        title(v.dname{i})
        axis([0 1 ylim])
        
        
%    % dp: Pre slow data
%     v  = get_series_dp(ds,'pre ',0,'slow',use_centroid);
%     f = figure;
%     set(f,'Name','PRE dp, slow')
% 
%         subplot(2,1,1)
%         h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'-');
%         hold on
%         plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
%         plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
%         set(h,'Color',.5'*[1 1 1]);
%         title(v.dname{i})
%         axis([0 1 ylim])
%     
%     v  = get_series_dp(ds,'post',0,'slow',use_centroid);
%     set(f,'Name','POST dp, slow')
% 
% 
%         subplot(2,1,2)
%         h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'k-');
%         hold on
%         plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
%         plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
%         set(h,'Color',.5'*[1 1 1]);
%         title(v.dname{i})   
%         axis([0 1 ylim])
end

%% Collect and plot time series data for dp

if visDPSeries
    shamData = 0;

    % Pre slow data
    v  = get_series_dp(ds,'pre ',shamData,'slow',use_centroid);
    f = figure;
    set(f,'Name','PRE V, slow')

    i=1;
        subplot(2,1,1)
        h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
        plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    
    
    % Post slow data
    v  = get_series_dp(ds,'post',shamData,'slow',use_centroid);
    f = figure;
    set(f,'Name','POST V, slow')


        subplot(2,1,2)
        h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
        plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    


%     % Med data
%     v  = get_series_dp(ds,'pre ',shamData,'med',use_centroid);
%     f = figure;
%     set(f,'Name','V, med')
% 
%     for i=1:length(v.time)
%         subplot(7,1,i)
%         h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'-');
%         hold on
%         plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
%         plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
%         set(h,'Color',.5'*[1 1 1]);
%         title(v.dname{i})
%     end
% 
% 
%     % Fast data
%     v  = get_series_dp(ds,'pre ',shamData,'fast',use_centroid);
%     f = figure;
%     set(f,'Name','V, fast')
% 
%     for i=1:length(v.time)
%         subplot(7,1,i)
%         h = plot(v.time{i}-min(v.time{i}),v.dpTot{i},'-');
%         hold on
%         plot(v.time{i}-min(v.time{i}),v.dpTrans{i},'b-')
%         plot(v.time{i}-min(v.time{i}),v.dpRot{i},'r-')
%         set(h,'Color',.5'*[1 1 1]);
%         title(v.dname{i})
%     end

end
    
%% Collect and plot time series data for alpha

if visSeries
    
    shamData = 0;

    % Slow data
    v  = get_series_vals('alpha',ds,'pre ',shamData,'slow',use_centroid);
    f = figure;
    set(f,'Name','alpha, slow')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end


    % Med data
    v  = get_series_vals('alpha',ds,'pre ',shamData,'med',use_centroid);
    f = figure;
    set(f,'Name','alpha, med')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end


    % Fast data
    v  = get_series_vals('alpha',ds,'pre ',shamData,'fast',use_centroid);
    f = figure;
    set(f,'Name','alpha, fast')

    for i=1:length(v.time)
        subplot(7,1,i)
        h = plot(v.time{i}-min(v.time{i}),v.spVals{i},'-');
        hold on
        plot(v.time{i}-min(v.time{i}),v.snVals{i},'b-')
        set(h,'Color',.5'*[1 1 1]);
        title(v.dname{i})
    end

end

%% Organize data for stats/plots
% Step through directories and collect data if rerun=1

if repool
    % TBF
    w.tbf   = get_single_vals('tbf',ds,'sn',0,use_centroid);
    wSh.tbf = get_single_vals('tbf',ds,'sn',1,use_centroid);

    % V amplitude
    w.V_amp   = get_single_vals('V_amp',ds,'sn',0,use_centroid);
    wSh.V_amp = get_single_vals('V_amp',ds,'sn',1,use_centroid);

    % alpha amplitude
    w.al_amp   = get_single_vals('alpha_amp',ds,'sn',0,use_centroid);
    wSh.al_amp = get_single_vals('alpha_amp',ds,'sn',1,use_centroid);

    % Phase shift
    w.phS   = get_single_vals('ph_shift',ds,'sn',0,use_centroid);
    wSh.phS = get_single_vals('ph_shift',ds,'sn',1,use_centroid);
    
    % K_ratio
    w.H   = get_single_vals('k_ratio',ds,'sn',0,use_centroid);
    wSh.H = get_single_vals('k_ratio',ds,'sn',1,use_centroid);
    
    % K_ratio_mean
    w.Hm   = get_single_vals('k_ratio_mean',ds,'sn',0,use_centroid);
    wSh.Hm = get_single_vals('k_ratio_mean',ds,'sn',1,use_centroid);
    
    % dp_rot amp
    w.dpRot   = get_single_vals('dp_rot_amp',ds,'sn',0,use_centroid);
    wSh.dpRot = get_single_vals('dp_rot_amp',ds,'sn',1,use_centroid);
    
    % dp_tot amp
    w.dpTot   = get_single_vals('dp_tot_amp',ds,'sn',0,use_centroid);
    wSh.dpTot = get_single_vals('dp_tot_amp',ds,'sn',1,use_centroid);
    
    % dp_trans amp
    w.dpTrans   = get_single_vals('dp_trans_amp',ds,'sn',0,use_centroid);
    wSh.dpTrans = get_single_vals('dp_trans_amp',ds,'sn',1,use_centroid);
    
    % Save
    if use_centroid
        save([rootDir filesep 'pooled_data'],'w')
        save([rootDir filesep 'pooled_shamdata'],'wSh')
    else
        save([rootDir filesep 'pooled_data_posterior'],'w')
        save([rootDir filesep 'pooled_posterior_shamdata'],'wSh')
    end
end

%% Deal with outliers

%% Visualize boxplot data

if visBox
    % load w
    if use_centroid
        load([rootDir filesep 'pooled_data.mat'])
    else
        load([rootDir filesep 'pooled_data_posterior.mat'])
    end
    
    gp_order = {'pre  04.5','post 04.5','pre  11.0 ','post 11.0 ','pre  22.0','post 22.0'};

    figure;
    boxplot([w.tbf_pre.d;w.tbf_post.d],...
        [[cell2mat(w.tbf_pre.exp) cell2mat(w.tbf_pre.spd)];...
        [cell2mat(w.tbf_post.exp) cell2mat(w.tbf_post.spd)]],...
        'grouporder',gp_order);
    ylabel('tbf')

    figure
    boxplot([w.V_amp_pre.d;w.V_amp_post.d],...
        [[cell2mat(w.V_amp_pre.exp) cell2mat(w.V_amp_pre.spd)];...
        [cell2mat(w.V_amp_post.exp) cell2mat(w.V_amp_post.spd)]],...
        'grouporder',gp_order);
    ylabel('V amp')

    figure
    boxplot([w.al_amp_pre.d;w.al_amp_post.d],...
        [[cell2mat(w.al_amp_pre.exp) cell2mat(w.al_amp_pre.spd)];...
        [cell2mat(w.al_amp_post.exp) cell2mat(w.al_amp_post.spd)]],...
        'grouporder',gp_order);
    ylabel('alpha amp')
    
    figure
    boxplot((180/pi).*[w.phS_pre.d;w.phS_post.d],...
        [[cell2mat(w.phS_pre.exp) cell2mat(w.phS_pre.spd)];...
        [cell2mat(w.phS_post.exp) cell2mat(w.phS_post.spd)]],...
        'grouporder',gp_order);
    hold on
    tmp = xlim;
    plot(tmp,[0 0],'k-')
    ylabel('Phase')
    
%     figure
%     boxplot([w.H_pre.d;w.H_post.d],...
%         [[cell2mat(w.H_pre.exp) cell2mat(w.H_pre.spd)];...
%         [cell2mat(w.H_post.exp) cell2mat(w.H_post.spd)]],...
%         'grouporder',gp_order);
%     ylabel('H (k-ratio)')
    
    figure
    boxplot([w.Hm_pre.d;w.Hm_post.d],...
        [[cell2mat(w.Hm_pre.exp) cell2mat(w.Hm_pre.spd)];...
        [cell2mat(w.Hm_post.exp) cell2mat(w.Hm_post.spd)]],...
        'grouporder',gp_order);
    hold on
    tmp = xlim;
    plot(tmp,[.65 .65],'k-')
    ylabel('H mean (k-ratio)')
    
    figure
    boxplot([w.dpRot_pre.d;w.dpRot_post.d],...
        [[cell2mat(w.dpRot_pre.exp) cell2mat(w.dpRot_pre.spd)];...
        [cell2mat(w.dpRot_post.exp) cell2mat(w.dpRot_post.spd)]],...
        'grouporder',gp_order);
    ylabel('dp Rot')
    
    figure
    boxplot([w.dpTrans_pre.d;w.dpTrans_post.d],...
        [[cell2mat(w.dpTrans_pre.exp) cell2mat(w.dpTrans_pre.spd)];...
        [cell2mat(w.dpTrans_post.exp) cell2mat(w.dpTrans_post.spd)]],...
        'grouporder',gp_order);
    ylabel('dp Trans')
    
    figure
    boxplot([w.dpTot_pre.d;w.dpTot_post.d],...
        [[cell2mat(w.dpTot_pre.exp) cell2mat(w.dpTot_pre.spd)];...
        [cell2mat(w.dpTot_post.exp) cell2mat(w.dpTot_post.spd)]],...
        'grouporder',gp_order);
    ylabel('dp Tot')
end

%% Visualize line plots

if visLines
    %load w
    if use_centroid
        load([rootDir filesep 'pooled_data.mat'])
    else
        load([rootDir filesep 'pooled_data_posterior.mat'])
    end
%     
%     Kinematics plot
%     f = figure;
%     set(f,'Name','kinematics')
%     
%     subplot(2,2,1)
%     lineplot(w.tbf);
%     ylabel('tbf')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,2)
%     lineplot(w.phS);
%     ylabel('Phase shift')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,3)
%     lineplot(w.V_amp);
%     ylabel('V amp')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,4)
%     lineplot(w.al_amp);
%     ylabel('alpha amp')
%     xlabel('Speed (cm/s)')
%     axis square
    
%     % Hydrodynamics plot
%     f = figure;
%     set(f,'Name','Hydrodynamics')
%     
    subplot(2,2,4)
    lineplot(w.Hm);
    ylabel('H (mean)')
    xlabel('Speed (cm/s)')
    axis square
    tmp = xlim;
    hold on 
    h = plot(tmp,[.65 .65],'-');
    set(h,'Color',.8*[1 1 1]);
%     
%     subplot(2,2,2)
%     lineplot(w.dpRot);
%     ylabel('dp Rot')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,1)
%     lineplot(w.dpTrans);
%     ylabel('dp Trans')    
%     xlabel('Speed (cm/s)')
%     axis square
    
    subplot(2,2,3)
    lineplot(w.dpTot);
    ylabel('dp Tot')    
    xlabel('Speed (cm/s)')
    axis square
    
%     % Sham data
% 
%     load([rootDir filesep 'pooled_shamdata.mat'])
%     
%     % Kinematics plot
%     f = figure;
%     set(f,'Name','kinematics (Sham)')
%     
%     subplot(2,2,1)
%     lineplot(wSh.tbf);
%     ylabel('tbf')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,2)
%     lineplot(wSh.phS);
%     ylabel('Phase shift')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,3)
%     lineplot(wSh.V_amp);
%     ylabel('V amp')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,4)
%     lineplot(wSh.al_amp);
%     ylabel('alpha amp')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     % Hydrodynamics plot
%     f = figure;
%     set(f,'Name','Hydrodynamics (Sham)')
%     
%     subplot(2,2,1)
%     lineplot(wSh.Hm);
%     ylabel('H (mean)')
%     xlabel('Speed (cm/s)')
%     axis square
%     tmp = xlim;
%     hold on 
%     h = plot(tmp,[.65 .65],'-');
%     set(h,'Color',.8*[1 1 1]);
%     
%     subplot(2,2,2)
%     lineplot(wSh.dpRot);
%     ylabel('dp Rot')
%     xlabel('Speed (cm/s)')
%     axis square
%     
%     subplot(2,2,3)
%     lineplot(wSh.dpTrans);
%     ylabel('dp Trans')    
%     xlabel('Speed (cm/s)')
%     axis square
end

%% Run stats on Sham experiments

if runShamStats
    % load w
    if use_centroid
        load([rootDir filesep 'pooled_data_shamdata.mat'])
    else
        load([rootDir filesep 'pooled_data_posterior_shamdata.mat'])
    end
        
    % TBF
    s     = wSh.tbf.all;
    sName = 'tbf';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
    
    % Phase shift
    s     = wSh.phS.all;
    sName = 'phS';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % Vamp
    s     = wSh.V_amp.all;
    sName = 'V_amp';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % alpha amp
    s     = wSh.al_amp.all;
    sName = 'alpha';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % H
    s     = wSh.Hm.all;
    sName = 'Hm';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
    
    % dp Rot
    s     = wSh.dpRot.all;
    sName = 'dpR';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % dp Trans
    s     = wSh.dpTrans.all;
    sName = 'dpT';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
end

%% Run Stats 

if runStats
    % load w
    if use_centroid
        load([rootDir filesep 'pooled_data.mat'])
    else
        load([rootDir filesep 'pooled_data_posterior.mat'])
    end
        
    % TBF
    s     = w.tbf.all;
    sName = 'tbf';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
    
    % Phase shift
    s     = w.phS.all;
    sName = 'phS';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % Vamp
    s     = w.V_amp.all;
    sName = 'V_amp';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % alpha amp
    s     = w.al_amp.all;
    sName = 'alpha';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % H
    s     = w.Hm.all;
    sName = 'Hm';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
    
    % dp Rot
    s     = w.dpRot.all;
    sName = 'dpR';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);

    % dp Trans
    s     = w.dpTrans.all;
    sName = 'dpT';
    
    varnames= {['exp_' sName] ['spd_' sName] ['indiv_' sName]};
    [p,table,stats] = anovan(s.val,{s.exp s.spd s.indiv},'model','interaction',...
    'varnames',varnames,'continuous',2);
end

return



function lineplot(d)

% Offset 
spd_off = .15;

% Colors used
clr_pre = [0.4784    0.0627    0.8941];
clr_post = [0    0.4980         0];

% Calculate stats for pre
[mu,sigma,muI,sigmaI] = normfit(d.pre_slow(:,2));
preD = [4.5-spd_off mu mu-muI(1) muI(2)-mu];

[mu,sigma,muI,sigmaI] = normfit(d.pre_med(:,2));
preD = [preD; 11-spd_off mu mu-muI(1) muI(2)-mu];

[mu,sigma,muI,sigmaI] = normfit(d.pre_fast(:,2));
preD = [preD; 22-spd_off mu mu-muI(1) muI(2)-mu];

% Calculate stats for post
[mu,sigma,muI,sigmaI] = normfit(d.post_slow(:,2));
postD = [4.5+spd_off mu mu-muI(1) muI(2)-mu];

[mu,sigma,muI,sigmaI] = normfit(d.post_med(:,2));
postD = [postD; 11+spd_off mu mu-muI(1) muI(2)-mu];

[mu,sigma,muI,sigmaI] = normfit(d.post_fast(:,2));
postD = [postD; 22+spd_off mu mu-muI(1) muI(2)-mu];

clear d

% Plot

h1 = plot(preD(:,1),preD(:,2),'-k');
hold on
h2 = plot(postD(:,1),postD(:,2),'-k');
set(h1,'Color',clr_pre);
set(h2,'Color',clr_post);
%legend('pre','post')

h3 = errorbar(preD(:,1),preD(:,2),preD(:,3),preD(:,4),'k.');
set(h3,'Color',clr_pre);

h4 = errorbar(postD(:,1),postD(:,2),postD(:,3),postD(:,4),'k.');
set(h4,'Color',clr_post);

h5 = plot(preD(:,1),preD(:,2),'ok');
h6 = plot(postD(:,1),postD(:,2),'ok');
set(h5,'Color',clr_pre);
set(h6,'Color',clr_post);

set(gca,'XTick',[4.5 11 22])
set(gca,'XLim',[2.5 24])


function d = get_single_vals(field,ds,fit_mode,sham_mode,use_centroid)
% field - string for the field in the data structure desired
% ds    - strcuture of directories
% fit_mode - ('sn' or 'sp') for sine wave or spline
% sham_mode - (1 or 0) 1 for sham sequences

% Extract data from files -------------------------------------------
k = 1;

% Create empty vectors
d.pre_slow = [];  d.pre_med = [];  d.pre_fast = [];
d.post_slow = []; d.post_med = []; d.post_fast = [];

for i = 1:length(ds)
    
    if sham_mode==ds(i).sham
        
        % Loop for 'exp ', then 'post'
        for j=1:2
            
            if j==1
                exp_mode = 'pre ';
            else
                exp_mode = 'post';
            end
            
            % Determine number of directories
            if strcmp(exp_mode,'pre ')
                numdir = length(ds(i).pre_dir);
            elseif strcmp(exp_mode,'post')
                numdir = length(ds(i).post_dir);
            end
            
            % Loop through directories for individual
            %vals_tmp = [nan; nan; nan];
            
            for j = 1:numdir
                
                val = nan;
                cSpd = nan;
                
                if strcmp(exp_mode,'pre ') && ~isempty(ds(i).pre_dir{j})
                    % Load
                    if strcmp(fit_mode,'sn')
                        if use_centroid
                            load([ds(i).pre_dir{j} filesep 'periodic_data.mat']);
                        else
                            load([ds(i).pre_dir{j} filesep 'periodic_data_posterior.mat']);
                        end
                        val = getfield(snData,field);
                        
                    else
                        if use_centroid
                            load([ds(i).pre_dir{j} filesep 'spline_data.mat']);
                        else
                            load([ds(i).pre_dir{j} filesep 'spline_data_posterior.mat']);
                        end
                        val = getfield(spData,field);
                        
                    end
                    
                    % Store
                    if j==1
                        d.pre_slow = [d.pre_slow; ds(i).fishnum val];
                        cSpd = 4.5;
                    elseif j==2
                        d.pre_med = [d.pre_med; ds(i).fishnum val];
                        cSpd = 11;
                    elseif j==3
                        d.pre_fast = [d.pre_fast; ds(i).fishnum val];
                        cSpd = 22;
                    end
                    
                elseif strcmp(exp_mode,'post') && ~isempty(ds(i).post_dir{j})
                    % Load
                    if strcmp(fit_mode,'sn')
                        if use_centroid
                            load([ds(i).post_dir{j} filesep 'periodic_data.mat']);
                        else
                            load([ds(i).post_dir{j} filesep 'periodic_data_posterior.mat']);
                        end
                        val = getfield(snData,field);
                        
                    else
                        if use_centroid
                            load([ds(i).post_dir{j} filesep 'spline_data.mat']);
                        else
                            load([ds(i).post_dir{j} filesep 'spline_data_posterior.mat']);
                        end
                        val = getfield(spData,field);
                        
                    end
                    
                    % Store
                    if j==1
                        d.post_slow = [d.post_slow; ds(i).fishnum val];
                        cSpd = 4.5;
                    elseif j==2
                        d.post_med = [d.post_med; ds(i).fishnum val];
                        cSpd = 11;
                    elseif j==3
                        d.post_fast = [d.post_fast; ds(i).fishnum val];
                        cSpd = 22;
                    end
                    
                elseif ~(strcmp(exp_mode,'pre ') || strcmp(exp_mode,'post'))
                    error('Incorrect exp_mode option requested')
                    
                end        
                
                d.all.exp(k,:)   = exp_mode;
                d.all.indiv(k,1) = ds(i).fishnum; 
                d.all.spd(k,1)   = cSpd;
                d.all.val(k,1)   = val;
                
                k = k+1;
            end          
        end
    end
end


function v = get_series_vals(field,ds,exp_mode,sham_mode,spd,use_centroid)
% field - string for the field in the data structure desired
% ds    - strcuture of directories
% exp_mode - ('pre' or 'post') for order wrt treatment
% sham_mode - (1 or 0) 1 for sham sequences
% spd - ('slow','med','fast') speed

k = 1;
for i = 1:length(ds)

    if sham_mode==ds(i).sham

        % Determine number of directories
        if strcmp(exp_mode,'pre ')
            numdir = length(ds(i).pre_dir);
        elseif strcmp(exp_mode,'post')
            numdir = length(ds(i).post_dir);
        end
        
        % Specify correct directory number
        if strcmp(spd,'slow')
            j = 1;
        elseif strcmp(spd,'med')
            j = 2;
        elseif strcmp(spd,'fast')
            j = 3;
        else
            error('incorrect entry for spd')
        end
        
        % Load requested data
        if j<=numdir
            
            % Name of directory
            v.dname{k} = [spd ' : ' ...
                ds(i).pre_dir{j}(find(ds(i).pre_dir{j}...
                ==filesep,1,'last')+1:end)];
                            
            % Load sine and spline data
            if strcmp(exp_mode,'pre ')
                if use_centroid
                    load([ds(i).pre_dir{j} filesep 'periodic_data.mat']);
                    load([ds(i).pre_dir{j} filesep 'spline_data.mat']);
                else
                    load([ds(i).pre_dir{j} filesep 'periodic_data_posterior.mat']);
                    load([ds(i).pre_dir{j} filesep 'spline_data_posterior.mat']);
                end
            elseif strcmp(exp_mode,'post')
                if use_centroid
                    load([ds(i).post_dir{j} filesep 'periodic_data.mat']);
                    load([ds(i).post_dir{j} filesep 'spline_data.mat']);
                else
                    load([ds(i).post_dir{j} filesep 'periodic_data_posterior.mat']);
                    load([ds(i).post_dir{j} filesep 'spline_data_posterior.mat']);
                end
            else
                error('Incorrect exp_mode option requested')
            end
            
            % Get time vector
            v.time{k} = getfield(snData,'time');
            
            % Get sine wave data
            v.snVals{k} = getfield(snData,field);
            
            % Get spline data
            v.spVals{k} = getfield(spData,field);
            
            k = k+1;
        end
    end
end
if k==1, v = [];end


function v = get_series_dp(ds,exp_mode,sham_mode,spd,use_centroid)
% ds    - strcuture of directories
% exp_mode - ('pre' or 'post') for order wrt treatment
% sham_mode - (1 or 0) 1 for sham sequences
% spd - ('slow','med','fast') speed

k = 1;
for i = 1:length(ds)

    if sham_mode==ds(i).sham

        % Determine number of directories
        if strcmp(exp_mode,'pre ')
            numdir = length(ds(i).pre_dir);
        elseif strcmp(exp_mode,'post')
            numdir = length(ds(i).post_dir);
        end
        
        % Specify correct directory number
        if strcmp(spd,'slow')
            j = 1;
        elseif strcmp(spd,'med')
            j = 2;
        elseif strcmp(spd,'fast')
            j = 3;
        else
            error('incorrect entry for spd')
        end
        
        % Load requested data
        if j<=numdir
            
            % Name of directory
            v.dname{k} = [spd ' : ' ...
                ds(i).pre_dir{j}(find(ds(i).pre_dir{j}...
                ==filesep,1,'last')+1:end)];
                            
            % Load sine data
            if strcmp(exp_mode,'pre ')
                if use_centroid
                    load([ds(i).pre_dir{j} filesep 'periodic_data.mat']);
                else
                    load([ds(i).pre_dir{j} filesep 'periodic_data_posterior.mat']);
                end
            elseif strcmp(exp_mode,'post')
                if use_centroid
                    load([ds(i).post_dir{j} filesep 'periodic_data.mat']);
                else
                    load([ds(i).post_dir{j} filesep 'periodic_data_posterior.mat']);
                end
            else
                error('Incorrect exp_mode option requested')
            end
            
            % Get time vector
            v.time{k} = getfield(snData,'time');
            
            % Get dp data
            v.dpTrans{k} = getfield(snData,'dp_trans');
            v.dpRot{k}   = getfield(snData,'dp_rot');
            v.dpTot{k}   = getfield(snData,'dp_tot');
            
            k = k+1;
        end
    end
end
if k==1, v = [];end


function ds = dirList(rootDir)
% Returns directory list to analyze
% Note that there are 3 directoreis within each category and they always
% correspond to 'slow', 'medium', and 'fast' flow speeds respectively

subDir = 'NeoFish1';
fnum = 1;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'ControlFish3' filesep 'ControlFish3_3'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'ControlFish3' filesep 'ControlFish3_5'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'ControlFish3' filesep 'ControlFish3_9'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish1_1'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish1_4'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish1_7'];

subDir = 'NeoFish2';
fnum = 2;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'ControlFish2' filesep 'ControlFish2_1'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'ControlFish2' filesep 'ControlFish2_7'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'ControlFish2' filesep 'ControlFish2_11'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish2_1'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish2_5'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish2_8'];

subDir = 'NeoFish3';
fnum = 3;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoFish3_1'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoFish3_8'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoFish3_10'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish3_12'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish3_16'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish3_18'];

subDir = 'NeoFish4';
fnum = 4;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoFish4_3'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoFish4_5'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoFish4_7'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish4_11'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish4_15'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish4_17'];

subDir = 'NeoFish5';
fnum = 5;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoFish5_3'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoFish5_7'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoFish5_10'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish5_14'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish5_16'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish5_19'];

subDir = 'NeoFish6';
fnum = 6;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoFish6_2'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoFish6_5'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoFish6_7'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish6_11'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish6_13'];
ds(fnum).post_dir{3}   = [];

subDir = 'NeoFish7';
fnum = 7;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 0;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoFish7_2'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoFish7_7'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoFish7_10'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoFish7_11'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoFish7_15'];
%ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoFish7_18'];
ds(fnum).post_dir{3}   = [];

subDir = 'NeoControlFish1';
fnum = 8;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 1;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoControlFish1_2_S0001'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoControlFish1_6_S0001'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoControlFish1_8_S0001'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoControlFish1_10_S0001'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoControlFish1_14_S0001'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoControlFish1_17_S0001'];

subDir = 'NeoControlFish2';
fnum = 9;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 1;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoControlFish2_1'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoControlFish2_4'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoControlFish2_9'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoControlFish2_12'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoControlFish2_13'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoControlFish2_17'];

subDir = 'NeoControlFish3';
fnum = 10;
ds(fnum).fishnum       = fnum;
ds(fnum).sham          = 1;
ds(fnum).pre_dir{1}    = [rootDir filesep subDir filesep 'NeoControlFish3_1'];
ds(fnum).pre_dir{2}    = [rootDir filesep subDir filesep 'NeoControlFish3_4'];
ds(fnum).pre_dir{3}    = [rootDir filesep subDir filesep 'NeoControlFish3_9'];
ds(fnum).post_dir{1}   = [rootDir filesep subDir filesep 'NeoControlFish3_11'];
ds(fnum).post_dir{2}   = [rootDir filesep subDir filesep 'NeoControlFish3_14'];
ds(fnum).post_dir{3}   = [rootDir filesep subDir filesep 'NeoControlFish3_16'];






