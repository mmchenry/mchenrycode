function point_analyze(imPath)
% Analyzes relationship between body speed and appendage angle speed.
% Data structures generated by point_acq




%% Define directories

% Prompt for first frame, if not given
if nargin < 1 
    imPath= uigetdir(pwd,'Choose directory with kinematic data');
    
    if imPath==0
        return
    end
end

% Load "seq"
load([imPath filesep 'seq_info.mat'])

% Load "body"
load([imPath filesep 'body_data.mat'])

% Load "pl"
load([imPath filesep 'appendage_data.mat'])

% Vector of frame numbers
frames = 1:length(pl.ptX);

% Index of frames for whic there are data
nonan = ~isnan(pl.ptX);

% Time vector
time = 0:1/seq.frame_rate:seq.numFrames/seq.frame_rate;


%% Define appendage angle wrt body coordinates

% Loop index
idx = 1;

% Step trhough frames
for i = frames(nonnan)
    
    % Check inputs
    if isnan(body.headX(i)) || isnan(body.tailX(i))
        error(['Need to find body coordinates for every frame for which ' ...
               ' you collect point data.'])
    end
    
    % Origin at body center
    origin = [mean([body.headX(i) body.tailX(i)]) ...
              mean([body.headY(i) body.tailY(i)])];
    
    % Use head to define local system
    head_local = [body.headX(i) body.headY(i)];
    S = localSystem(origin,head_local);
    
    % Transform current points to local system
    pts   = [pl(1).ptX(i) pl(1).ptY(i)];
    [x,y] = globalToLocal(pts,origin,S);
    
    % Calculate appendage angle
    angl(idx) = atan2(y,x);
    
    % Step index
    idx = idx + 1;
    
    clear S origin x y pts
end


%% Calculate speeds



%Dbody = 





function S = localSystem(P1,P2)
% Defines a transformation vector for a local coordinate system in an
% inertial frame of reference.  Uses P1 as the origin and P2 to find the
% direction of the y-axis.  Coordinates must be (1x2) vectors.

if size(P1,1)~=1 || size(P1,2)~=2 ||...
   size(P2,1)~=1 || size(P2,2)~=2
    error('Coordinates must be (1x2) vectors');
end

yAxis       = (P2-P1)./norm(P2-P1);
xAxis       = [yAxis(2); -yAxis(1)];
S           = [xAxis yAxis'];


function [x,y] = localToGlobal(pts,origin,S)

if size(pts,2)~=2 || size(origin,2)~=2 
    error('Coordinates must be a (nx2) vector');
end

pts         = [inv(S)'*pts']';
pts(:,1)    = pts(:,1)+origin(1);
pts(:,2)    = pts(:,2)+origin(2);
x           = pts(:,1);
y           = pts(:,2);


function [x,y] = globalToLocal(pts,origin,S)

if size(pts,2)~=2 || size(origin,2)~=2 
    error('Coordinates must be a (nx2) vector');
end

pts(:,1)    = pts(:,1)-origin(1);
pts(:,2)    = pts(:,2)-origin(2);
pts         = [S'*pts']';
x           = pts(:,1);
y           = pts(:,2);

