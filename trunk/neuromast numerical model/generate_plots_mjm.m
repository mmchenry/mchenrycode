function generate_plots_mjm


% 1. Generate plots of flow generated by an oscillating sphere, 
% according to Lamb (1932), Article 361
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Variables 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
f = [10.^linspace(-1,3,100)];
w = 2.*pi.*f;


% Physical constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C = 1497; % speed of sound in water at 25C (m/s)
v = 1e-6; % kinematic viscosity of water (m^2/s)
a = 3.*10^-3; % radius of the oscillating sphere (m)
%a = [1:2:7].*10^-3; % radius of the oscillating sphere (m)
r = 50e-3; % distance from sphere center (m)


% % Construct plot showing freq response of flow
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% figure;
% for j = 1:length(a)
%     [u, ua, ub] = oscillating_sphere(C, v, w, a(j), r);
% 
%     subplot(2,1,1);
%     loglog(f, abs(u));
%     xlabel('Frequency (Hz)');
%     %ylabel('Magnitude (dB)');
%     hold on
%     
%     subplot(2,1,2);
%     semilogx(f, 180*unwrap(angle(u))/pi);
%     xlabel('Frequency (Hz)');
%     ylabel('Phase (degrees)');
%     hold on
% end





% Model parameters and run simulation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
c.freqs         = f;
c.numHeights    = 1; % number of heights at which to evaluate deflection
c.bunHeight     = 5.3e-6; % bundle height (From Dinklo, 2005)
c.dispAmp       = 10 * 10^-6; % Amplitude of fluid displacement (m)
c.E_matrix      = 31; %31 Pa
c.EI_kino       = 2.4e-21; % 2e-21 N m^2
c.bundleStiff   = 2.925e-14; %Nm/rad (van Netten & Kroese, 1987)
c.linStiff      = 0.13 * 10^-3; %N/m (van Netten & Kroese, 1987) 
c.rho           = 998; %998 kg m^-3
c.mu            = 1.002e-3; %1.002e-3 Pa s
c.baseDiameter 	= 8.88e-6;
c.midDiameter 	= 7.2e-6 ;
c.kinoHeight 	= 16e-6;
c.cupHeight     = 45e-6;
c.numHairs      = 10;

c.sphereDist    = r; 
c.sphereRadius  = a;
c.spdSnd        = C;

% Run model, calculate sensitivity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
c       = numerical_vibratingSphere(c,'torsion spring');
S_bun   = [c.M(1,:) ./ (i.*(c.freqs').*2.*pi.*c.dispAmp)];




% Construct plot showing freq response of cupula
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure;
for j = 1:length(a)
    [u, ua, ub] = oscillating_sphere(C, v, w, a(j), r);

    S_tot = S_bun .* u;

    subplot(2,1,1);
    loglog(f, abs(S_tot));
    xlabel('Frequency (Hz)');
    %ylabel('Magnitude (dB)');
    hold on

    subplot(2,1,2);
    semilogx(f, 180*unwrap(angle(S_tot))/pi);
    xlabel('Frequency (Hz)');
    ylabel('Phase (degrees)');
    hold on
end









function [u, ua, ub] = oscillating_sphere(C, v, w, a, r)
%This is flow for the profile normal to the direction of oscillation

   delta   = ( 2 .* v ./ w ).^0.5;
   k = sqrt(w.^2 ./ (C.^2 + (4/3)*i*v.*w));
   h = (1-i) * sqrt(w ./ (2*v));

   A1 = - (3 + 3*i*h.*a - h.^2.*a.^2).*k.^3.*a.^3.*exp(i*k.*a) ./...
     (k.^2.*a.^2.*(1+i*h.*a) + (2+2*i*k.*a-k.^2.*a.^2).*h.^2.*a.^2);

   B1 = (1/3) * (3 + 3*i*k.*a - k.^2.*a.^2).*h.^3.*a.^3.*exp(i*h.*a) ./...
     (k.^2.*a.^2.*(1+i*h.*a) + (2+2*i*k.*a-k.^2.*a.^2).*h.^2.*a.^2);

   ua = - A1.*(i./(k.^2.*r.^2) + 1./(k.^3.*r.^3)).*exp(-i*k.*r);
   ub = B1.*(3./(h.*r) - 3*i./(h.^2.*r.^2) - 3./(h.^3.*r.^3)).*exp(-i*h.*r);

   u = ua + ub;
            
            
           

function c = speedofSound(T)
%Gives speed of sound in m/s for temperature in degrees C
% From Bilaniuk & Wong (1993 & 1996)
c =   1.40238744 * 10^3 + 5.03836171 * T - 5.81172916 * 10^-2 * T^2 ...
    + 3.34638117 * 10^-4 * T^3 - 1.48259672 * 10^-6 * T^4 ...
    + 3.16585020 * 10^-9 * T^5;
