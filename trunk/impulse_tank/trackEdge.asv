function trackEdge(calConst)

[fName,pName,FilterIndex] = uigetfile('*.tif',...
    'Choose first tif image in sequence')

if ~FilterIndex
    error('no file chosen');
end

if nargin < 1
    calConst = 1;
end

dataShow = 1;
mov = findMov([pName fName]);
im          = giveFrame(mov,1);
imshow(im)
title('Select axis over which to track edge')
%[xS,yS]     = choosePoints(im,1,2)
xS = [145;109];yS = [209;209];
[d1F,xE,relPos]   = findPosition(im,xS,yS);
xRange            = abs(xS(2)-xS(1));

if dataShow
    hF          = figure;
    zoomSize    = 100;
    set(hF,'DoubleBuffer','on');
    set(hF,'Position',[350 90 1515 1025]);
end
for i = 1:mov.numFrames
    im          = giveFrame(mov,i);
    xS          = [round(xE-relPos.*xRange) round(xE+(1-relPos).*xRange)];
    [d1F,xE]    = findPosition(im,xS,yS);
    if dataShow
        zoomFactor = 15;
        figure(hF)
        subplot(2,1,1)
        imshow(im);hold on
        plot([xS(1) xS(2)],[mean(yS) mean(yS)],'w');
        plot([xE],mean(yS),'+r');
        hold off
        title([num2str(i) ' of ' num2str(mov.numFrames) ' frames'])
        subplot(2,1,2);
        imshow(im);hold on
        plot([xE],mean(yS),'+r');
        hold off
        zoom(zoomFactor)
        xRng    = abs(diff([get(gca,'XLim')]));
        yRng    = abs(diff([get(gca,'YLim')]));
        axis([xE-xRng/2 xE+xRng/2 mean(yS)-yRng/2 mean(yS)+yRng/2]);
        title(['Zoomed ' num2str(zoomFactor) ' x']);
    end
end




function img = giveFrame(mov,fNum)
if mov.isTiff
    img = imread([mov.dirPath filesep mov.fileNames(fNum).name '.' mov.ext]);
else
    frm1 = (aviread([mov.dirPath filesep mov.fileName],fNum));
    img  = frm1.cdata;
end

function mov = findMov(pName)
ext         = pName(max(find(pName=='.'))+1:end);
fName       = pName(max(find(pName==filesep))+1:end);
pName       = pName(1:max(find(pName==filesep)));
mov.dirPath = pName;
mov.ext     = ext;
%returns movie data
if strcmp(ext,'avi')
    mov.isTiff      = 0;
    mov.fileName    = fName;
    mov.info        = aviinfo([mov.dirPath filesep mov.fileName]);
    mov.numFrames   = mov.info.NumFrames;
elseif strcmp(ext,'tif') | strcmp(ext,'tiff')
    mov.isTiff      = 1;
    mov.fileNames   = giveTiffStack(pName,fName);
    mov.numFrames   = length(mov.fileNames);
else
    error('Files should have either a .avi or .tif extension');
end

function files = giveTiffStack(mpath,fname)
[pathstr,name,ext,versn]    = fileparts(fname);
if max(diff(find(name=='0'))) > 1
    iNonZero        = find(~(name=='0'));
    iChgZero        = diff(iNonZero);
    lastBeforeZero  = iNonZero(max(find(~(iChgZero==1))));
    lenEnd          = length(name)-(lastBeforeZero);
    nameHead        = name(1:lastBeforeZero);
    startNum        = str2num(name(lastBeforeZero+1:end));
else
    iNum        = min(find(name=='0')):length(name);
    nameHead    = name(1:min(iNum)-1);
    lenEnd      = length(name)-length(nameHead);
    startNum    = str2num(name(min(iNum):end));
end
a           = dir(mpath);
tNum        = startNum;
j           = 1;
while 1==1
    nameEnd     = [num2str(zeros(1,lenEnd-length(num2str(tNum)))) num2str(tNum)];
    tempName    = [nameHead nameEnd(find(~(nameEnd==' ')))];
    isFile      = 0;
    %Step through file list to see if file exists:
    for i = (tNum-startNum)+1:length(a)
        [pathstr,name,ext,versn]    = fileparts(a(i).name);
        if ~(min(ext=='.')) & (length(name)>=length(tempName))
            if strcmp(name(1:length(tempName)),tempName)
                files(j).name   = tempName;
                j               = j + 1;
                tNum            = tNum + 1;
                isFile          = 1;
                break
            end
        end
    end
    if ~isFile, break; end
end

function [d1F,xE,relPos] = findPosition(im,xS,yS)
pixBandWidth    = 2;
edgeSize        = 10; %number of pixels at the edges

%acquire data from images:
x           = [round(min(xS)):round(max(xS))];
y           = [round(mean(yS))-pixBandWidth:round(mean(yS))+pixBandWidth];

d1          = double(  im(y,x)  );

% Average data, add edges:
d1          = mean(d1,1);
d1          = (d1-mean(d1(:))) / range(d1);
x           = [min(x)-edgeSize:max(x)+edgeSize];
d1          = [ones(1,edgeSize).*d1(1) d1 ones(1,edgeSize).*d1(end)];

%Filter & Differentiate
SampleRate  = 1;
cutfreq     = .15;
ff          = cutfreq/(SampleRate/2);
[B A]       = butter(2,ff);
dMean       = mean([d1(:)]);
d1F         = filtfilt(B,A,d1);
d1D			= diff(d1F);

%Normalize derivative:
% base1		= mean(d1D(1:10));
% d1D			= (d1D-base1) ./ range(d1D);
% xD          = x(1:end-1) + mean(diff(x))/2;

%find portion to focus on

%Spline fit
tolerance           = 1.e-1;
%sp          = spaps(x,d1F, tolerance);
sp                  = spmak(augknt(linspace(min(x),max(x),length(d1F)),4),d1F);
dsp                 = fnder(sp);
[minVal,minD]       = fnmin(dsp,[min(x)+edgeSize max(x)-edgeSize]);

spI                 = spmak(augknt(linspace(min(x),max(x),length(d1F)),4),-d1F);
dspI                = fnder(spI);
[maxVal,maxD]       = fnmin(dspI,[min(x)+edgeSize max(x)-edgeSize]);
%dsp = fnder(sp); dspt = fnval(dsp,s); ddspt = fnval(fnder(dsp),s);

% %Fit a 4th order polynomial:
% coef            = polyfit(x,d1F,10);
% coefD           = polyder(coef);
% coefD2          = polyder(coefD);
% Droots      	= roots(coefD);
% D2atRoots       = polyval(coefD2,Droots);
% % deflect         = Droots(find(D2atRoots<0))+ deflectEst;

%remove edges:
x       = x(edgeSize+1:end-edgeSize);
d1      = d1(edgeSize+1:end-edgeSize);
d1F     = d1F(edgeSize+1:end-edgeSize);
%d1D     = d1D(edgeSize+1:end-edgeSize);

xE      = maxD;
temp    = abs(x-xE);
relPos  = min(find(temp == min(temp))) / length(x);

if 0
    figure;
    xTemp = linspace(min(x),max(x),1000);
    subplot(2,1,1);
    plot(x,d1,'.k');grid on;hold on
    plot(x,d1F,'b-')
    plot(xTemp,fnval(sp,xTemp),'g-')
    plot([xE xE],[min(d1) max(d1)],'r-')
    subplot(2,1,2);
    %plot(xD,d1D,'b.');grid on;hold on
    plot(xTemp,fnval(dsp,xTemp),'r-');grid on;hold on
    plot([xE xE],[-1 1],'r-')
    xlabel('x position (pix)');
end



function  y = isfile(fName,fPath)
a	= dir(fPath);
y	= 0;
for i = 1:length(a)
    if (length(a(i).name) > 3) & (a(i).name(end-3)=='.')
        cName	= a(i).name(1:end-4);
    else
        cName   = a(i).name;
    end
    if (length(a(i).name) > 3) & strcmp(cName,fName)
        y = 1;
        break
    end
end

function [x,y] = choosePoints(img,link,numPts)
%Used for finding coordinate points on a static image 'img'.
figure;
imshow(img);
hold on;
set(gcf,'DoubleBuffer','on');
disp(' '); disp(' ');
disp('Left mouse button picks points.');disp(' ');
disp('Right mouse button removes last point.');disp(' ');
disp('Press return to stop.')
n = 0;
but = 1;
while 1 == 1
    [xi,yi,but] = ginput(1);
    imshow(img);hold on
    if isempty(but)
        break
    elseif but==1 %Left click
        n = n+1;
        if n > numPts
            n = numPts;
        end
        x(n) = xi;
        y(n) = yi;
        if link
            plot(x,y,'ro-')
        else
            plot(x,y,'ro')
        end
    elseif but==3 %Right click
        if n-1 < 1
            n = 0;
            x = [];
            y = [];
        else
            n = n-1;
            x = x(1:n);
            y = y(1:n);
        end
        if link
            plot(x,y,'ro-')
        else
            plot(x,y,'ro')
        end
    end
    hold off
end
x = x'; y = y';
if ~(length(x)==numPts)
    disp(' ');disp(' '); warning(['Try again -- you need to find ' num2str(numPts) ' points']);
    [x,y] = choosePoints(img,link,numPts);
end
close